{{define "base"}}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <link rel="stylesheet" href="/static/css/bootstrap.min.css"/>
        <link rel="stylesheet" href="/static/css/main-style.css"/>
        <link rel="stylesheet" href="/static/node_modules/vanillajs-datepicker/dist/css/datepicker.min.css">
        <link rel="stylesheet" type="text/css" href="/static/node_modules/notie/dist/notie.min.css">
        <title>
            {{block "title" .}}
            {{end}}
        </title>
    </head>
    <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button
                    class="navbar-toggler"
                    type="button"
                    data-bs-toggle="collapse"
                    data-bs-target="#navbarSupportedContent"
                    aria-controls="navbarSupportedContent"
                    aria-expanded="false"
                    aria-label="Toggle navigation"
            >
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link  active" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown" aria-current="page">
                        <a
                                class="nav-link dropdown-toggle"
                                href="#"
                                id="navbarDropdown"
                                role="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false"
                        >
                            Rooms
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <li>
                                <a class="dropdown-item" href="/generals-quarters"
                                >General's Quarters</a
                                >
                            </li>
                            <li>
                                <a class="dropdown-item" href="/majors-suites">Major's Suite</a>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>


    {{block "content" .}}
    {{end}}

    <div class="row my-footer">
        <div class="col-sm text-center">Left</div>
        <div class="col-sm text-center">Middle</div>
        <div class="col-sm text-center">Right</div>
    </div>

    <!-- add some jquery stuffs -->
    <script src="static/node_modules/jquery/dist/jquery.slim.min.js"></script>
    <script src="static/node_modules/popper.js/dist/popper.min.js"></script>
    <script src="static/js/bootstrap.min.js"></script>
    <script src="static/node_modules/vanillajs-datepicker/dist/js/datepicker-full.min.js">
    </script>
    <script src="static/node_modules/sweetalert2/dist/sweetalert2.all.min.js"></script>
    <script src="/static/node_modules/notie/dist/notie.min.js"></script>

    {{block "js".}}
    {{end}}
    <script>
        let attention = Prompt();


        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            let forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        form.classList.add('was-validated')
                    }, false)
                })
        })();


        //  notie alerts
        function notify(msg, msgType) {
            notie.alert({
                type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
                text: msg,
                stay: false, // optional, default = false
                time: 2, // optional, default = 3, minimum = 1,
                position: 'top' // optional, default = 'top', enum: ['top', 'bottom']
            })
        }

        function notifyModal(title, text, icon, confirmationButtonText) {
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmButtonText: confirmationButtonText
            })
        }
        {{with .Flash}}
        notify("{{.}}", 'success')
        {{end}}
        {{with .Warning}}
        notify("{{.}}", 'warning')
        {{end}}
        {{with .Error}}
        notify("{{.}}", "error")
        {{end}}
        function Prompt() {
            let toast = function (c) {
                const {
                    msg = "",
                    icon = 'success',
                    position = 'top-end'
                } = c;
                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }
            let success = function (c) {
                const {
                    msg = '',
                    title = '',
                    footer = '',
                } = c;
                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer
                })
            }
            let error = function (c) {
                const {
                    msg = '',
                    title = '',
                    footer = '',
                } = c;
                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: msg,
                    footer: footer
                })
            }
            let custom = async function (c) {
                const {
                    msg = "",
                    title = ""
                } = c;
                const {value: result} = await Swal.fire({
                    title: title,
                    html: msg,
                    width: 600,
                    willOpen() {
                        if (c.willOpen !== undefined) {
                            c.willOpen();
                        }
                    },
                    backdrop: false,
                    showCancelButton: true,
                    focusConfirm: false,
                    preConfirm: () => {
                        return [
                            document.getElementById('start-test').value,
                            document.getElementById('end-test').value
                        ]
                    },
                    didOpen: () => {
                        if (c.didOpen() !== undefined) {
                            c.didOpen();
                        }
                    }
                })
                if (result) {
                    if (result.dismiss !== Swal.DismissReason.cancel) {
                        if (result.value !== "") {
                            if (c.callback !== undefined) {
                                c.callback(result);
                            } else {
                                c.callback(false);
                            }
                        } else {
                            c.callback(false);
                        }
                    }
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        }
    </script>
    </body>
    </html>
{{end}}